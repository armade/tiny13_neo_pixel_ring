
Tiny_ws2812.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000003da  0000046e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  00800062  00800062  00000470  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000935  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000058e  00000000  00000000  00000e59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003af  00000000  00000000  000013e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00001798  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000032e  00000000  00000000  0000182c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005f5  00000000  00000000  00001b5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000214f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1d c0       	rjmp	.+58     	; 0x48 <__vector_6>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	ea ed       	ldi	r30, 0xDA	; 218
  24:	f3 e0       	ldi	r31, 0x03	; 3
  26:	02 c0       	rjmp	.+4      	; 0x2c <__do_copy_data+0x10>
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0
  2c:	a2 36       	cpi	r26, 0x62	; 98
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <__do_copy_data+0xc>

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a2 e6       	ldi	r26, 0x62	; 98
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a7 38       	cpi	r26, 0x87	; 135
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	9b d0       	rcall	.+310    	; 0x17a <main>
  44:	c8 c1       	rjmp	.+912    	; 0x3d6 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <__vector_6>:
	
	return;
}

ISR(TIM0_COMPA_vect)
{
  48:	1f 92       	push	r1
  4a:	0f 92       	push	r0
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	0f 92       	push	r0
  50:	11 24       	eor	r1, r1
	// Clear irq flag
	TCNT0 = 0;
  52:	12 be       	out	0x32, r1	; 50
}
  54:	0f 90       	pop	r0
  56:	0f be       	out	0x3f, r0	; 63
  58:	0f 90       	pop	r0
  5a:	1f 90       	pop	r1
  5c:	18 95       	reti

0000005e <ws2812_setleds>:
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
}

void inline ws2812_setleds_pin(struct cRGB *ledarray, uint16_t leds, uint8_t pinmask)
{
  ws2812_sendarray_mask((uint8_t*)ledarray,leds+leds+leds,pinmask);
  5e:	9b 01       	movw	r18, r22
  60:	22 0f       	add	r18, r18
  62:	33 1f       	adc	r19, r19
  64:	62 0f       	add	r22, r18
  66:	73 1f       	adc	r23, r19
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;

  ws2812_DDRREG |= maskhi; // Enable output
  68:	b8 9a       	sbi	0x17, 0	; 23

  masklo	=~maskhi&ws2812_PORTREG;
  6a:	28 b3       	in	r18, 0x18	; 24
  6c:	2e 7f       	andi	r18, 0xFE	; 254
  maskhi |=        ws2812_PORTREG;
  6e:	38 b3       	in	r19, 0x18	; 24
  70:	31 60       	ori	r19, 0x01	; 1

  sreg_prev=SREG;
  72:	4f b7       	in	r20, 0x3f	; 63
  cli();
  74:	f8 94       	cli

  while (datlen--) {
  76:	61 15       	cp	r22, r1
  78:	71 05       	cpc	r23, r1
  7a:	91 f0       	breq	.+36     	; 0xa0 <__stack+0x1>
  7c:	fc 01       	movw	r30, r24
  7e:	68 0f       	add	r22, r24
  80:	79 1f       	adc	r23, r25
    curbyte=*data++;
  82:	81 91       	ld	r24, Z+

    __asm volatile(
  84:	98 e0       	ldi	r25, 0x08	; 8

00000086 <loop54>:
  86:	38 bb       	out	0x18, r19	; 24
  88:	00 00       	nop
  8a:	87 ff       	sbrs	r24, 7
  8c:	28 bb       	out	0x18, r18	; 24
  8e:	88 0f       	add	r24, r24
  90:	00 00       	nop
  92:	28 bb       	out	0x18, r18	; 24
  94:	00 c0       	rjmp	.+0      	; 0x96 <loop54+0x10>
  96:	9a 95       	dec	r25
  98:	b1 f7       	brne	.-20     	; 0x86 <loop54>
  maskhi |=        ws2812_PORTREG;

  sreg_prev=SREG;
  cli();

  while (datlen--) {
  9a:	e6 17       	cp	r30, r22
  9c:	f7 07       	cpc	r31, r23
  9e:	89 f7       	brne	.-30     	; 0x82 <ws2812_setleds+0x24>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
  a0:	4f bf       	out	0x3f, r20	; 63
  sei();
  a2:	78 94       	sei
  a4:	08 95       	ret

000000a6 <ws2812_setleds_pin>:
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
}

void inline ws2812_setleds_pin(struct cRGB *ledarray, uint16_t leds, uint8_t pinmask)
{
  ws2812_sendarray_mask((uint8_t*)ledarray,leds+leds+leds,pinmask);
  a6:	9b 01       	movw	r18, r22
  a8:	22 0f       	add	r18, r18
  aa:	33 1f       	adc	r19, r19
  ac:	62 0f       	add	r22, r18
  ae:	73 1f       	adc	r23, r19
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;

  ws2812_DDRREG |= maskhi; // Enable output
  b0:	27 b3       	in	r18, 0x17	; 23
  b2:	24 2b       	or	r18, r20
  b4:	27 bb       	out	0x17, r18	; 23

  masklo	=~maskhi&ws2812_PORTREG;
  b6:	28 b3       	in	r18, 0x18	; 24
  b8:	34 2f       	mov	r19, r20
  ba:	30 95       	com	r19
  bc:	23 23       	and	r18, r19
  maskhi |=        ws2812_PORTREG;
  be:	38 b3       	in	r19, 0x18	; 24
  c0:	43 2b       	or	r20, r19

  sreg_prev=SREG;
  c2:	3f b7       	in	r19, 0x3f	; 63
  cli();
  c4:	f8 94       	cli

  while (datlen--) {
  c6:	61 15       	cp	r22, r1
  c8:	71 05       	cpc	r23, r1
  ca:	91 f0       	breq	.+36     	; 0xf0 <loop132+0x1a>
  cc:	fc 01       	movw	r30, r24
  ce:	68 0f       	add	r22, r24
  d0:	79 1f       	adc	r23, r25
    curbyte=*data++;
  d2:	81 91       	ld	r24, Z+

    __asm volatile(
  d4:	98 e0       	ldi	r25, 0x08	; 8

000000d6 <loop132>:
  d6:	48 bb       	out	0x18, r20	; 24
  d8:	00 00       	nop
  da:	87 ff       	sbrs	r24, 7
  dc:	28 bb       	out	0x18, r18	; 24
  de:	88 0f       	add	r24, r24
  e0:	00 00       	nop
  e2:	28 bb       	out	0x18, r18	; 24
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <loop132+0x10>
  e6:	9a 95       	dec	r25
  e8:	b1 f7       	brne	.-20     	; 0xd6 <loop132>
  maskhi |=        ws2812_PORTREG;

  sreg_prev=SREG;
  cli();

  while (datlen--) {
  ea:	e6 17       	cp	r30, r22
  ec:	f7 07       	cpc	r31, r23
  ee:	89 f7       	brne	.-30     	; 0xd2 <ws2812_setleds_pin+0x2c>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
  f0:	3f bf       	out	0x3f, r19	; 63
  sei();
  f2:	78 94       	sei
  f4:	08 95       	ret

000000f6 <ws2812_sendarray>:
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;

  ws2812_DDRREG |= maskhi; // Enable output
  f6:	b8 9a       	sbi	0x17, 0	; 23

  masklo	=~maskhi&ws2812_PORTREG;
  f8:	28 b3       	in	r18, 0x18	; 24
  fa:	2e 7f       	andi	r18, 0xFE	; 254
  maskhi |=        ws2812_PORTREG;
  fc:	38 b3       	in	r19, 0x18	; 24
  fe:	31 60       	ori	r19, 0x01	; 1

  sreg_prev=SREG;
 100:	4f b7       	in	r20, 0x3f	; 63
  cli();
 102:	f8 94       	cli

  while (datlen--) {
 104:	61 15       	cp	r22, r1
 106:	71 05       	cpc	r23, r1
 108:	91 f0       	breq	.+36     	; 0x12e <loop197+0x1a>
 10a:	fc 01       	movw	r30, r24
 10c:	68 0f       	add	r22, r24
 10e:	79 1f       	adc	r23, r25
    curbyte=*data++;
 110:	81 91       	ld	r24, Z+

    __asm volatile(
 112:	98 e0       	ldi	r25, 0x08	; 8

00000114 <loop197>:
 114:	38 bb       	out	0x18, r19	; 24
 116:	00 00       	nop
 118:	87 ff       	sbrs	r24, 7
 11a:	28 bb       	out	0x18, r18	; 24
 11c:	88 0f       	add	r24, r24
 11e:	00 00       	nop
 120:	28 bb       	out	0x18, r18	; 24
 122:	00 c0       	rjmp	.+0      	; 0x124 <loop197+0x10>
 124:	9a 95       	dec	r25
 126:	b1 f7       	brne	.-20     	; 0x114 <loop197>
  maskhi |=        ws2812_PORTREG;

  sreg_prev=SREG;
  cli();

  while (datlen--) {
 128:	e6 17       	cp	r30, r22
 12a:	f7 07       	cpc	r31, r23
 12c:	89 f7       	brne	.-30     	; 0x110 <ws2812_sendarray+0x1a>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
 12e:	4f bf       	out	0x3f, r20	; 63
  sei();
 130:	78 94       	sei
 132:	08 95       	ret

00000134 <ws2812_sendarray_mask>:
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;

  ws2812_DDRREG |= maskhi; // Enable output
 134:	27 b3       	in	r18, 0x17	; 23
 136:	24 2b       	or	r18, r20
 138:	27 bb       	out	0x17, r18	; 23

  masklo	=~maskhi&ws2812_PORTREG;
 13a:	28 b3       	in	r18, 0x18	; 24
 13c:	34 2f       	mov	r19, r20
 13e:	30 95       	com	r19
 140:	23 23       	and	r18, r19
  maskhi |=        ws2812_PORTREG;
 142:	38 b3       	in	r19, 0x18	; 24
 144:	43 2b       	or	r20, r19

  sreg_prev=SREG;
 146:	3f b7       	in	r19, 0x3f	; 63
  cli();
 148:	f8 94       	cli

  while (datlen--) {
 14a:	61 15       	cp	r22, r1
 14c:	71 05       	cpc	r23, r1
 14e:	91 f0       	breq	.+36     	; 0x174 <loop259+0x1a>
 150:	fc 01       	movw	r30, r24
 152:	68 0f       	add	r22, r24
 154:	79 1f       	adc	r23, r25
    curbyte=*data++;
 156:	81 91       	ld	r24, Z+

    __asm volatile(
 158:	98 e0       	ldi	r25, 0x08	; 8

0000015a <loop259>:
 15a:	48 bb       	out	0x18, r20	; 24
 15c:	00 00       	nop
 15e:	87 ff       	sbrs	r24, 7
 160:	28 bb       	out	0x18, r18	; 24
 162:	88 0f       	add	r24, r24
 164:	00 00       	nop
 166:	28 bb       	out	0x18, r18	; 24
 168:	00 c0       	rjmp	.+0      	; 0x16a <loop259+0x10>
 16a:	9a 95       	dec	r25
 16c:	b1 f7       	brne	.-20     	; 0x15a <loop259>
  maskhi |=        ws2812_PORTREG;

  sreg_prev=SREG;
  cli();

  while (datlen--) {
 16e:	e6 17       	cp	r30, r22
 170:	f7 07       	cpc	r31, r23
 172:	89 f7       	brne	.-30     	; 0x156 <ws2812_sendarray_mask+0x22>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
 174:	3f bf       	out	0x3f, r19	; 63
  sei();
 176:	78 94       	sei
 178:	08 95       	ret

0000017a <main>:

static inline void Init_wakeup_timer(void)
{
	// 9.6MHz/(256*37) = 1013HZ ~ 1ms
	//TCCR0B = (1 << CS02);   // timer prescaler == 256
	TCCR0A = (1 << WGM01);  // timer set to CTC mode
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	8f bd       	out	0x2f, r24	; 47
	TIMSK0 = (1 << OCIE0A); // enable CTC timer interrupt
 17e:	84 e0       	ldi	r24, 0x04	; 4
 180:	89 bf       	out	0x39, r24	; 57
	OCR0A = 37; 
 182:	85 e2       	ldi	r24, 0x25	; 37
 184:	86 bf       	out	0x36, r24	; 54
	
	set_sleep_mode(SLEEP_MODE_IDLE);    // only disable cpu and flash clk while sleeping
 186:	85 b7       	in	r24, 0x35	; 53
 188:	87 7e       	andi	r24, 0xE7	; 231
 18a:	85 bf       	out	0x35, r24	; 53
	//struct pixel p;
	static char cou = 0;
	uint8_t i;
	
	Init_wakeup_timer();
	sei();
 18c:	78 94       	sei

	/* loop */
	while (1) {
		
		for (i = 0; i < NR_OF_LEDS; i++) {
			color_wheel(
 18e:	cc e0       	ldi	r28, 0x0C	; 12
 190:	ec 2e       	mov	r14, r28
 192:	f1 2c       	mov	r15, r1
				(((i * 256) / NR_OF_LEDS) + cou) & 0xff,
				&pixels[i]);
			Neo_Pixel_Ring_set(&pixels[i],0,255);
		}
		cou++;
		delay = 5;
 194:	d5 e0       	ldi	r29, 0x05	; 5
 196:	7d 2e       	mov	r7, r29
		//color_wheel(cou++,&pixels[0]);
		//RGB_fire_run(&pixels[0],&p);
		ws2812_setleds((struct cRGB *)pixels, NR_OF_LEDS);
		
		TCCR0B = (1 << CS02); // timer prescaler == 256
 198:	14 e0       	ldi	r17, 0x04	; 4
 19a:	41 2e       	mov	r4, r17
 19c:	c0 90 62 00 	lds	r12, 0x0062	; 0x800062 <__data_end>
 1a0:	c3 e6       	ldi	r28, 0x63	; 99
 1a2:	d0 e0       	ldi	r29, 0x00	; 0
	
	set_sleep_mode(SLEEP_MODE_IDLE);    // only disable cpu and flash clk while sleeping
}

int main(void)
{
 1a4:	00 e0       	ldi	r16, 0x00	; 0
 1a6:	10 e0       	ldi	r17, 0x00	; 0
 1a8:	92 c0       	rjmp	.+292    	; 0x2ce <main+0x154>
{
    if (pos < 85) {
    	color->r = pos * 3;
    	color->g = 255 - pos * 3;
    	color->b = 0;
    } else if (pos < 170) {
 1aa:	6a 3a       	cpi	r22, 0xAA	; 170
 1ac:	08 f4       	brcc	.+2      	; 0x1b0 <main+0x36>
 1ae:	a3 c0       	rjmp	.+326    	; 0x2f6 <main+0x17c>
        pos -= 85;
        color->r = 255 - pos * 3;
        color->g = 0;
        color->b = pos * 3;
    } else {
        pos -= 170;
 1b0:	6a 5a       	subi	r22, 0xAA	; 170
        color->r  = 0;
 1b2:	19 82       	std	Y+1, r1	; 0x01
        color->g = pos * 3;
 1b4:	86 2f       	mov	r24, r22
 1b6:	88 0f       	add	r24, r24
 1b8:	86 0f       	add	r24, r22
 1ba:	88 83       	st	Y, r24
        color->b = 255 - pos * 3;
 1bc:	86 2f       	mov	r24, r22
 1be:	88 0f       	add	r24, r24
 1c0:	88 0f       	add	r24, r24
 1c2:	68 1b       	sub	r22, r24
 1c4:	88 24       	eor	r8, r8
 1c6:	8a 94       	dec	r8
 1c8:	86 0e       	add	r8, r22
 1ca:	8a 82       	std	Y+2, r8	; 0x02
 1cc:	91 2c       	mov	r9, r1
 1ce:	a1 2c       	mov	r10, r1
 1d0:	b1 2c       	mov	r11, r1
 1d2:	a5 01       	movw	r20, r10
 1d4:	94 01       	movw	r18, r8
 1d6:	c5 01       	movw	r24, r10
 1d8:	b4 01       	movw	r22, r8
 1da:	bd d0       	rcall	.+378    	; 0x356 <__mulsi3>
 1dc:	a5 01       	movw	r20, r10
 1de:	94 01       	movw	r18, r8
 1e0:	ba d0       	rcall	.+372    	; 0x356 <__mulsi3>
 1e2:	dc 01       	movw	r26, r24
 1e4:	cb 01       	movw	r24, r22
 1e6:	90 58       	subi	r25, 0x80	; 128
 1e8:	af 4f       	sbci	r26, 0xFF	; 255
 1ea:	bf 4f       	sbci	r27, 0xFF	; 255
 1ec:	cd 01       	movw	r24, r26
 1ee:	aa 27       	eor	r26, r26
 1f0:	bb 27       	eor	r27, r27
 1f2:	9c 01       	movw	r18, r24
 1f4:	22 95       	swap	r18
 1f6:	32 95       	swap	r19
 1f8:	30 7f       	andi	r19, 0xF0	; 240
 1fa:	32 27       	eor	r19, r18
 1fc:	20 7f       	andi	r18, 0xF0	; 240
 1fe:	32 27       	eor	r19, r18
 200:	a9 01       	movw	r20, r18
 202:	48 1b       	sub	r20, r24
 204:	59 0b       	sbc	r21, r25
 206:	ca 01       	movw	r24, r20
 208:	9a 01       	movw	r18, r20
 20a:	22 95       	swap	r18
 20c:	32 95       	swap	r19
 20e:	30 7f       	andi	r19, 0xF0	; 240
 210:	32 27       	eor	r19, r18
 212:	20 7f       	andi	r18, 0xF0	; 240
 214:	32 27       	eor	r19, r18
 216:	82 0f       	add	r24, r18
 218:	93 1f       	adc	r25, r19
 21a:	d9 2e       	mov	r13, r25

inline static uint8_t gamma_corr(uint8_t input)
{
	uint32_t accu;

	accu = (uint32_t)input*input*input + (1UL<<15); // 27 bit max
 21c:	89 80       	ldd	r8, Y+1	; 0x01
 21e:	91 2c       	mov	r9, r1
 220:	a1 2c       	mov	r10, r1
 222:	b1 2c       	mov	r11, r1
 224:	a5 01       	movw	r20, r10
 226:	94 01       	movw	r18, r8
 228:	c5 01       	movw	r24, r10
 22a:	b4 01       	movw	r22, r8
 22c:	94 d0       	rcall	.+296    	; 0x356 <__mulsi3>
 22e:	a5 01       	movw	r20, r10
 230:	94 01       	movw	r18, r8
 232:	91 d0       	rcall	.+290    	; 0x356 <__mulsi3>
 234:	dc 01       	movw	r26, r24
 236:	cb 01       	movw	r24, r22
 238:	90 58       	subi	r25, 0x80	; 128
 23a:	af 4f       	sbci	r26, 0xFF	; 255
 23c:	bf 4f       	sbci	r27, 0xFF	; 255


static inline int Neo_Pixel_Ring_set(struct pixel *LED, uint8_t nr, uint16_t brightness) {
	if (nr < NR_OF_LEDS) {

		LED->r = ((uint16_t)gamma_corr(LED->r)*brightness)>>8;
 23e:	cd 01       	movw	r24, r26
 240:	aa 27       	eor	r26, r26
 242:	bb 27       	eor	r27, r27
 244:	9c 01       	movw	r18, r24
 246:	22 95       	swap	r18
 248:	32 95       	swap	r19
 24a:	30 7f       	andi	r19, 0xF0	; 240
 24c:	32 27       	eor	r19, r18
 24e:	20 7f       	andi	r18, 0xF0	; 240
 250:	32 27       	eor	r19, r18
 252:	a9 01       	movw	r20, r18
 254:	48 1b       	sub	r20, r24
 256:	59 0b       	sbc	r21, r25
 258:	ca 01       	movw	r24, r20
 25a:	9a 01       	movw	r18, r20
 25c:	22 95       	swap	r18
 25e:	32 95       	swap	r19
 260:	30 7f       	andi	r19, 0xF0	; 240
 262:	32 27       	eor	r19, r18
 264:	20 7f       	andi	r18, 0xF0	; 240
 266:	32 27       	eor	r19, r18
 268:	82 0f       	add	r24, r18
 26a:	93 1f       	adc	r25, r19
 26c:	99 83       	std	Y+1, r25	; 0x01

inline static uint8_t gamma_corr(uint8_t input)
{
	uint32_t accu;

	accu = (uint32_t)input*input*input + (1UL<<15); // 27 bit max
 26e:	88 80       	ld	r8, Y
 270:	91 2c       	mov	r9, r1
 272:	a1 2c       	mov	r10, r1
 274:	b1 2c       	mov	r11, r1
 276:	a5 01       	movw	r20, r10
 278:	94 01       	movw	r18, r8
 27a:	c5 01       	movw	r24, r10
 27c:	b4 01       	movw	r22, r8
 27e:	6b d0       	rcall	.+214    	; 0x356 <__mulsi3>
 280:	a5 01       	movw	r20, r10
 282:	94 01       	movw	r18, r8
 284:	68 d0       	rcall	.+208    	; 0x356 <__mulsi3>
 286:	dc 01       	movw	r26, r24
 288:	cb 01       	movw	r24, r22
 28a:	90 58       	subi	r25, 0x80	; 128
 28c:	af 4f       	sbci	r26, 0xFF	; 255
 28e:	bf 4f       	sbci	r27, 0xFF	; 255

static inline int Neo_Pixel_Ring_set(struct pixel *LED, uint8_t nr, uint16_t brightness) {
	if (nr < NR_OF_LEDS) {

		LED->r = ((uint16_t)gamma_corr(LED->r)*brightness)>>8;
		LED->g = ((uint16_t)gamma_corr(LED->g)*brightness)>>8;
 290:	cd 01       	movw	r24, r26
 292:	aa 27       	eor	r26, r26
 294:	bb 27       	eor	r27, r27
 296:	9c 01       	movw	r18, r24
 298:	22 95       	swap	r18
 29a:	32 95       	swap	r19
 29c:	30 7f       	andi	r19, 0xF0	; 240
 29e:	32 27       	eor	r19, r18
 2a0:	20 7f       	andi	r18, 0xF0	; 240
 2a2:	32 27       	eor	r19, r18
 2a4:	a9 01       	movw	r20, r18
 2a6:	48 1b       	sub	r20, r24
 2a8:	59 0b       	sbc	r21, r25
 2aa:	ca 01       	movw	r24, r20
 2ac:	9a 01       	movw	r18, r20
 2ae:	22 95       	swap	r18
 2b0:	32 95       	swap	r19
 2b2:	30 7f       	andi	r19, 0xF0	; 240
 2b4:	32 27       	eor	r19, r18
 2b6:	20 7f       	andi	r18, 0xF0	; 240
 2b8:	32 27       	eor	r19, r18
 2ba:	82 0f       	add	r24, r18
 2bc:	93 1f       	adc	r25, r19
 2be:	98 83       	st	Y, r25
		LED->b = ((uint16_t)gamma_corr(LED->b)*brightness)>>8;
 2c0:	da 82       	std	Y+2, r13	; 0x02
 2c2:	13 95       	inc	r17
 2c4:	23 96       	adiw	r28, 0x03	; 3
	sei();

	/* loop */
	while (1) {
		
		for (i = 0; i < NR_OF_LEDS; i++) {
 2c6:	01 15       	cp	r16, r1
 2c8:	5c e0       	ldi	r21, 0x0C	; 12
 2ca:	15 07       	cpc	r17, r21
 2cc:	21 f1       	breq	.+72     	; 0x316 <main+0x19c>
			color_wheel(
 2ce:	c8 01       	movw	r24, r16
 2d0:	b7 01       	movw	r22, r14
 2d2:	5a d0       	rcall	.+180    	; 0x388 <__divmodhi4>
 2d4:	6c 0d       	add	r22, r12
	return 0;
}

static inline char color_wheel(uint8_t pos, struct pixel *color)
{
    if (pos < 85) {
 2d6:	65 35       	cpi	r22, 0x55	; 85
 2d8:	08 f0       	brcs	.+2      	; 0x2dc <main+0x162>
 2da:	67 cf       	rjmp	.-306    	; 0x1aa <main+0x30>
    	color->r = pos * 3;
 2dc:	86 2f       	mov	r24, r22
 2de:	88 0f       	add	r24, r24
 2e0:	86 0f       	add	r24, r22
 2e2:	89 83       	std	Y+1, r24	; 0x01
    	color->g = 255 - pos * 3;
 2e4:	86 2f       	mov	r24, r22
 2e6:	88 0f       	add	r24, r24
 2e8:	88 0f       	add	r24, r24
 2ea:	68 1b       	sub	r22, r24
 2ec:	61 50       	subi	r22, 0x01	; 1
 2ee:	68 83       	st	Y, r22
    	color->b = 0;
 2f0:	1a 82       	std	Y+2, r1	; 0x02
 2f2:	d1 2c       	mov	r13, r1
 2f4:	93 cf       	rjmp	.-218    	; 0x21c <main+0xa2>
    } else if (pos < 170) {
        pos -= 85;
 2f6:	65 55       	subi	r22, 0x55	; 85
        color->r = 255 - pos * 3;
 2f8:	86 2f       	mov	r24, r22
 2fa:	88 0f       	add	r24, r24
 2fc:	88 0f       	add	r24, r24
 2fe:	46 2f       	mov	r20, r22
 300:	48 1b       	sub	r20, r24
 302:	84 2f       	mov	r24, r20
 304:	81 50       	subi	r24, 0x01	; 1
 306:	89 83       	std	Y+1, r24	; 0x01
        color->g = 0;
 308:	18 82       	st	Y, r1
        color->b = pos * 3;
 30a:	86 2e       	mov	r8, r22
 30c:	88 0c       	add	r8, r8
 30e:	68 0d       	add	r22, r8
 310:	6a 83       	std	Y+2, r22	; 0x02
 312:	86 2e       	mov	r8, r22
 314:	5b cf       	rjmp	.-330    	; 0x1cc <main+0x52>
			color_wheel(
				(((i * 256) / NR_OF_LEDS) + cou) & 0xff,
				&pixels[i]);
			Neo_Pixel_Ring_set(&pixels[i],0,255);
		}
		cou++;
 316:	c3 94       	inc	r12
 318:	c0 92 62 00 	sts	0x0062, r12	; 0x800062 <__data_end>
		delay = 5;
 31c:	70 92 60 00 	sts	0x0060, r7	; 0x800060 <__DATA_REGION_ORIGIN__>
		//color_wheel(cou++,&pixels[0]);
		//RGB_fire_run(&pixels[0],&p);
		ws2812_setleds((struct cRGB *)pixels, NR_OF_LEDS);
 320:	6c e0       	ldi	r22, 0x0C	; 12
 322:	70 e0       	ldi	r23, 0x00	; 0
 324:	83 e6       	ldi	r24, 0x63	; 99
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	9a de       	rcall	.-716    	; 0x5e <ws2812_setleds>
		
		TCCR0B = (1 << CS02); // timer prescaler == 256
 32a:	43 be       	out	0x33, r4	; 51
 32c:	07 c0       	rjmp	.+14     	; 0x33c <main+0x1c2>
		while(delay--){
			sleep_mode();// sleep until timer interrupt is triggered
 32e:	85 b7       	in	r24, 0x35	; 53
 330:	80 62       	ori	r24, 0x20	; 32
 332:	85 bf       	out	0x35, r24	; 53
 334:	88 95       	sleep
 336:	85 b7       	in	r24, 0x35	; 53
 338:	8f 7d       	andi	r24, 0xDF	; 223
 33a:	85 bf       	out	0x35, r24	; 53
		//color_wheel(cou++,&pixels[0]);
		//RGB_fire_run(&pixels[0],&p);
		ws2812_setleds((struct cRGB *)pixels, NR_OF_LEDS);
		
		TCCR0B = (1 << CS02); // timer prescaler == 256
		while(delay--){
 33c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 340:	9f ef       	ldi	r25, 0xFF	; 255
 342:	98 0f       	add	r25, r24
 344:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
 348:	81 11       	cpse	r24, r1
 34a:	f1 cf       	rjmp	.-30     	; 0x32e <main+0x1b4>
			sleep_mode();// sleep until timer interrupt is triggered
		}
		TCCR0B &= ~(1<<CS02); //Stop Timer0
 34c:	83 b7       	in	r24, 0x33	; 51
 34e:	8b 7f       	andi	r24, 0xFB	; 251
 350:	83 bf       	out	0x33, r24	; 51
		TCNT0 = 0;
 352:	12 be       	out	0x32, r1	; 50
	}
 354:	23 cf       	rjmp	.-442    	; 0x19c <main+0x22>

00000356 <__mulsi3>:
 356:	ee 27       	eor	r30, r30
 358:	ff 27       	eor	r31, r31

0000035a <__mulsi3_helper>:
 35a:	aa 27       	eor	r26, r26
 35c:	bb 27       	eor	r27, r27
 35e:	08 c0       	rjmp	.+16     	; 0x370 <__mulsi3_helper+0x16>
 360:	a2 0f       	add	r26, r18
 362:	b3 1f       	adc	r27, r19
 364:	e4 1f       	adc	r30, r20
 366:	f5 1f       	adc	r31, r21
 368:	22 0f       	add	r18, r18
 36a:	33 1f       	adc	r19, r19
 36c:	44 1f       	adc	r20, r20
 36e:	55 1f       	adc	r21, r21
 370:	96 95       	lsr	r25
 372:	87 95       	ror	r24
 374:	77 95       	ror	r23
 376:	67 95       	ror	r22
 378:	98 f3       	brcs	.-26     	; 0x360 <__mulsi3_helper+0x6>
 37a:	70 40       	sbci	r23, 0x00	; 0
 37c:	a9 f7       	brne	.-22     	; 0x368 <__mulsi3_helper+0xe>
 37e:	00 97       	sbiw	r24, 0x00	; 0
 380:	99 f7       	brne	.-26     	; 0x368 <__mulsi3_helper+0xe>
 382:	bd 01       	movw	r22, r26
 384:	cf 01       	movw	r24, r30
 386:	08 95       	ret

00000388 <__divmodhi4>:
 388:	97 fb       	bst	r25, 7
 38a:	07 2e       	mov	r0, r23
 38c:	16 f4       	brtc	.+4      	; 0x392 <__divmodhi4+0xa>
 38e:	00 94       	com	r0
 390:	06 d0       	rcall	.+12     	; 0x39e <__divmodhi4_neg1>
 392:	77 fd       	sbrc	r23, 7
 394:	08 d0       	rcall	.+16     	; 0x3a6 <__divmodhi4_neg2>
 396:	0b d0       	rcall	.+22     	; 0x3ae <__udivmodhi4>
 398:	07 fc       	sbrc	r0, 7
 39a:	05 d0       	rcall	.+10     	; 0x3a6 <__divmodhi4_neg2>
 39c:	3e f4       	brtc	.+14     	; 0x3ac <__divmodhi4_exit>

0000039e <__divmodhi4_neg1>:
 39e:	90 95       	com	r25
 3a0:	81 95       	neg	r24
 3a2:	9f 4f       	sbci	r25, 0xFF	; 255
 3a4:	08 95       	ret

000003a6 <__divmodhi4_neg2>:
 3a6:	70 95       	com	r23
 3a8:	61 95       	neg	r22
 3aa:	7f 4f       	sbci	r23, 0xFF	; 255

000003ac <__divmodhi4_exit>:
 3ac:	08 95       	ret

000003ae <__udivmodhi4>:
 3ae:	aa 1b       	sub	r26, r26
 3b0:	bb 1b       	sub	r27, r27
 3b2:	51 e1       	ldi	r21, 0x11	; 17
 3b4:	07 c0       	rjmp	.+14     	; 0x3c4 <__udivmodhi4_ep>

000003b6 <__udivmodhi4_loop>:
 3b6:	aa 1f       	adc	r26, r26
 3b8:	bb 1f       	adc	r27, r27
 3ba:	a6 17       	cp	r26, r22
 3bc:	b7 07       	cpc	r27, r23
 3be:	10 f0       	brcs	.+4      	; 0x3c4 <__udivmodhi4_ep>
 3c0:	a6 1b       	sub	r26, r22
 3c2:	b7 0b       	sbc	r27, r23

000003c4 <__udivmodhi4_ep>:
 3c4:	88 1f       	adc	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	5a 95       	dec	r21
 3ca:	a9 f7       	brne	.-22     	; 0x3b6 <__udivmodhi4_loop>
 3cc:	80 95       	com	r24
 3ce:	90 95       	com	r25
 3d0:	bc 01       	movw	r22, r24
 3d2:	cd 01       	movw	r24, r26
 3d4:	08 95       	ret

000003d6 <_exit>:
 3d6:	f8 94       	cli

000003d8 <__stop_program>:
 3d8:	ff cf       	rjmp	.-2      	; 0x3d8 <__stop_program>
